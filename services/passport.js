const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

//fetching the users collection out of mongo
const User = mongoose.model('users');

// serialize the user - give them a cookie
// the user is whatever was just pulled out of the database
// user.id is a unique identifier generated by mongo
// ^ very useful when we have more strategys like facebook, email
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// deserialize the cookie and see what user it belongs to
// grab the user from the database
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});
//create a new instance of a google user
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback"
    },
    (accessToken, refreshToken, profile, done) => {
      /* ensure that the user does not always exists...
      *  queries return a promise so we cannot set the values to a variable
      *  we need to code it as a promise...
      * existingUser is the model instance of the user found from User.findOne()
      */
      User.findOne({ googleId: profile.id }).then(existingUser => {
          //now that we found the user, do they actually exists
          if (existingUser) {
            //we already have the record
            //we're "done" here, proceed with authentication flow
            /*
            * done(err, user)
            * err -> was there an error, how do we handle it?
            * user -> the user record, tells passport here is the user we found
            */
            done(null, existingUser);
          } else {
            //create a new model instance and make a record in the database
            new User({ googleId: profile.id })
            .save()
            .then(newUser => done(null, newUser));
          }
        });
    }
  )
);
